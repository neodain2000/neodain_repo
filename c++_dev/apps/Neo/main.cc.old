#include <iostream>

#include "CMutex.h"
#include "CLock.h"

#include <cpprest/http_client.h>
#include <cpprest/filestream.h>

using namespace std;
using namespace utility;
using namespace web;
using namespace web::http;
using namespace web::http::client;
using namespace concurrency::streams;

class ITestImp
{
  public:
	ITestImp() { }
	virtual ~ITestImp() { }
	virtual void getHttp()=0;
	virtual void getAsyncHttp()=0;
	virtual void getJson()=0;
  private:
	ITestImp(const ITestImp& inTestImp);
	ITestImp& operator=(const ITestImp& inTestImp);
};

class CTestImp : ITestImp
{
  public:
	CTestImp()
	{
		cout << "[CTestImp] created" << endl;
	}
	virtual ~CTestImp()
	{
		cout << "[CTestImp] deleted" << endl;
	}
	void getHttp()
	{
		cout << "[CTestImp] getHttp" << endl;
		try
		{
			http_client client(U("http://en.cppreference.com/w/"));
			auto resp = client.request(U("GET")).get();
			cout << U("STATUS : ") << resp.status_code() << endl;
			cout << "content-type : " << resp.headers().content_type() << endl;
			cout << resp.extract_string(true).get() << endl;
		}
		catch (const std::exception &e)
		{
			cout << "[getHttp] error is " << e.what() << endl;
		}
	}
	void getAsyncHttp()
	{
		cout << "[CTestImp] getAsyncHttp" << endl;
		try
		{
			http_client client(U("http://en.cppreference.com/w/"));
			
			client.request(U("GET")).then([](http_response resp)
			{
				cout << U("STATUS : ") << resp.status_code() << endl;
				cout << "content-type : " << resp.headers().content_type() << endl;
				resp.extract_string(true).then([](string_t sBoby)
				{
					cout << sBoby << endl;
				}).wait();
			}).wait();
		}
		catch (const std::exception &e)
		{
			cout << "[getHttp] error is " << e.what() << endl;
		}
	}
	void getJson()
	{ 
		cout << "[CTestImp] getJson" << endl;
		try
		{
			http_client client(U("http://date.jsontest.com/"));

			http_request req(methods::GET);

			client.request(req).then([=](http_response r)
			{
				cout << U("STATUS : ") << r.status_code() << endl;
				cout << "content-type : " << r.headers().content_type() << endl;
				//{
				//      "time": "11:25:23 AM",
				//      "milliseconds_since_epoch" : 1423999523092,
				//      "date" : "02-15-2015"
				//}
				r.extract_json(true).then([](json::value v) 
				{ 
					cout << v.at(U("date")).as_string() << endl;
					cout << v.at(U("time")).as_string() << endl;
				}).wait();
			}).wait();
		}
		catch (const std::exception &e)
		{ 
			cout << "[getHttp] error is " << e.what() << endl;
		}
	}
  private:
	CTestImp(const CTestImp& inImp);
	CTestImp& operator=(const CTestImp& inImp);
};

class CTest
{
  enum { SYNC_HTTP = 0, ASYNC_HTTP, C_JSON };
  public:
	CTest(): mutex_m(), pImp_m(nullptr), cbf_num(0)
	{
		cout << "[CTest] created" << endl;
		CLock clock(&mutex_m);
		pImp_m = reinterpret_cast<ITestImp *>(new CTestImp());
	}
	~CTest()
	{
		cout << "[CTest] deleted" << endl;
		if(pImp_m != nullptr) delete pImp_m;
	}
	void callFunction(uint32_t cf_num)
	{
		if(cf_num == static_cast<uint32_t>(CTest::SYNC_HTTP))
		{
			cout << "[CTest] callFunction[SYNC_HTTP] : " << cf_num << endl;
			getHttp();
		}
		else if(cf_num == static_cast<uint32_t>(CTest::ASYNC_HTTP))
		{
			cout << "[CTest] callFunction[ASYNC_HTTP] : " << cf_num << endl;
			getAsyncHttp();
		}
		else if(cf_num == static_cast<uint32_t>(CTest::C_JSON))
		{
			cout << "[CTest] callFunction[JSON] : " << cf_num << endl;
			getJson();
		}
		else
		{
			cout << "[CTest] unknown callFunction : " << cf_num << endl;
		}
	}
	void getHttp()
	{
	 	cout << "[CTest] getHttp" << endl;
		if(pImp_m == nullptr) return;
		CLock clock(&mutex_m);
		pImp_m->getHttp();
	}
	void getAsyncHttp()
	{
		cout << "[CTest] getAsyncHttp" << endl;
		if(pImp_m == nullptr) return;
		CLock clock(&mutex_m);
		pImp_m->getAsyncHttp();
	}
	void getJson()
	{
		cout << "[CTest] getJson" << endl;
		if(pImp_m == nullptr) return;
		CLock clock(&mutex_m);
		pImp_m->getJson();
	}
  private:
	CTest(const CTest& inTest);
	CTest& operator=(const CTest& inTest);
	CMutex mutex_m;
	ITestImp *pImp_m;
	uint32_t cbf_num;
};

void coutType()
{
	cout << "==============================" << endl;
	cout << "char       : " << sizeof(char) << endl;
	cout << "char*      : " << sizeof(char *) << endl;
	cout << "uint8_t    : " << sizeof(uint8_t) << endl;
	cout << "int8_t     : " << sizeof(int8_t) << endl;
	cout << "uint16_t   : " << sizeof(uint16_t) << endl;
	cout << "int16_t    : " << sizeof(int16_t) << endl;
	cout << "uint32_t   : " << sizeof(uint32_t) << endl;
	cout << "int32_t    : " << sizeof(int32_t) << endl;
	cout << "uint64_t   : " << sizeof(uint64_t) << endl;
	cout << "int64_t    : " << sizeof(int64_t) << endl;
	cout << "short      : " << sizeof(short) << endl;
	cout << "int        : " << sizeof(int) << endl;
	cout << "long       : " << sizeof(long) << endl;
	cout << "long long  : " << sizeof(long long) << endl;
	cout << "==============================" << endl;
}

int main(void)
{
	cout << "Hellow world" << endl;
	coutType();
	CTest myTest;
	myTest.getHttp();
	myTest.getAsyncHttp();
	myTest.getJson();
	myTest.callFunction(0);
	myTest.callFunction(1);
	myTest.callFunction(2);
	return 0;
}
