#include <iostream>

enum Days : uint16_t { Sunday=0, Monday, Tuesday, Wednesday, Thursday, Friday, Saturday };
enum class Months : uint16_t { Jan=1, Feb, Mar, Apr, May, Jun, Jul, Aug, Sep, Oct, Nov, Dec };

const char *week[] = { "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" };

const char *DayName(Days day) {
	if(day > Saturday) // enum value may change integer with impl
		return "unknown day";
	return week[day]; // enum value may use with Array index
}

// Bit Flag Enum Type : char/interger type
enum BitDays {
	None		= 0x00, 	// 0000 0000
	SunDay		= 1,		// 0000 0001
	MonDay		= 1 << 1, 	// 0000 0010
	TuesDay		= 1 << 2,	// 0000 0100
	WednesDay	= 1 << 3,	// 0000 1000
	ThursDay	= 1 << 4, 	// 0001 0000
	FriDay		= 1 << 5, 	// 0010 0000
	SaturDay	= 1 << 6	// 0100 0000
};
	
void BitDayName(uint16_t d)
{
	std::cout << d << std::endl;
	for(uint16_t i=0; i<7; ++i) if(d & (1 << i)) std::cout << week[i] << std::endl;
}


int main()
{
	Days today = Thursday;

	Days tomorrow = static_cast<Days>(today + 1);
	
	std::cout << "today : " << DayName(today) << " tomorrow : " << DayName(tomorrow) << std::endl;
	std::cout << DayName(today) << " is " << today + 1 << " day" << std::endl;
	std::cout << DayName(tomorrow) << " is " << tomorrow + 1 << " day" << std::endl;

	today = static_cast<Days>(Saturday + Friday);
	std::cout << DayName(today) << " is " << today << " day" << std::endl;

	Months thisMonth = Months::Dec;

	Months nextMonth;
	if((static_cast<uint16_t>(thisMonth) + 1) > static_cast<uint16_t>(Months::Dec)) {
		nextMonth = Months::Jan;
	} else {
		nextMonth = static_cast<Months>((static_cast<uint16_t>(thisMonth) + 1));
	}

	std::cout << "thisMonth is " << static_cast<uint16_t>(thisMonth) << std::endl;
	std::cout << "nextMonth is " << static_cast<uint16_t>(nextMonth) << std::endl;

	BitDays meeting = static_cast<BitDays>(ThursDay | SunDay);	
	BitDayName(meeting);

	return 0;
}

	

