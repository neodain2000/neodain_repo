// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: Neodain.proto

#include "Neodain.pb.h"
#include "Neodain.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>

static const char* NeodainEventService_method_names[] = {
  "/NeodainEventService/pdNeodainEvent",
};

std::unique_ptr< NeodainEventService::Stub> NeodainEventService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< NeodainEventService::Stub> stub(new NeodainEventService::Stub(channel));
  return stub;
}

NeodainEventService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_pdNeodainEvent_(NeodainEventService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status NeodainEventService::Stub::pdNeodainEvent(::grpc::ClientContext* context, const ::NEODAIN_EVENT& request, ::NEODAIN_EVENT_RESP* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_pdNeodainEvent_, context, request, response);
}

void NeodainEventService::Stub::experimental_async::pdNeodainEvent(::grpc::ClientContext* context, const ::NEODAIN_EVENT* request, ::NEODAIN_EVENT_RESP* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_pdNeodainEvent_, context, request, response, std::move(f));
}

void NeodainEventService::Stub::experimental_async::pdNeodainEvent(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::NEODAIN_EVENT_RESP* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_pdNeodainEvent_, context, request, response, std::move(f));
}

void NeodainEventService::Stub::experimental_async::pdNeodainEvent(::grpc::ClientContext* context, const ::NEODAIN_EVENT* request, ::NEODAIN_EVENT_RESP* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_pdNeodainEvent_, context, request, response, reactor);
}

void NeodainEventService::Stub::experimental_async::pdNeodainEvent(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::NEODAIN_EVENT_RESP* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_pdNeodainEvent_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::NEODAIN_EVENT_RESP>* NeodainEventService::Stub::AsyncpdNeodainEventRaw(::grpc::ClientContext* context, const ::NEODAIN_EVENT& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::NEODAIN_EVENT_RESP>::Create(channel_.get(), cq, rpcmethod_pdNeodainEvent_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::NEODAIN_EVENT_RESP>* NeodainEventService::Stub::PrepareAsyncpdNeodainEventRaw(::grpc::ClientContext* context, const ::NEODAIN_EVENT& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::NEODAIN_EVENT_RESP>::Create(channel_.get(), cq, rpcmethod_pdNeodainEvent_, context, request, false);
}

NeodainEventService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NeodainEventService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NeodainEventService::Service, ::NEODAIN_EVENT, ::NEODAIN_EVENT_RESP>(
          [](NeodainEventService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::NEODAIN_EVENT* req,
             ::NEODAIN_EVENT_RESP* resp) {
               return service->pdNeodainEvent(ctx, req, resp);
             }, this)));
}

NeodainEventService::Service::~Service() {
}

::grpc::Status NeodainEventService::Service::pdNeodainEvent(::grpc::ServerContext* context, const ::NEODAIN_EVENT* request, ::NEODAIN_EVENT_RESP* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* ActiveNeodainInfoService_method_names[] = {
  "/ActiveNeodainInfoService/pdActiveNeodainInfo",
};

std::unique_ptr< ActiveNeodainInfoService::Stub> ActiveNeodainInfoService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ActiveNeodainInfoService::Stub> stub(new ActiveNeodainInfoService::Stub(channel));
  return stub;
}

ActiveNeodainInfoService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_pdActiveNeodainInfo_(ActiveNeodainInfoService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ActiveNeodainInfoService::Stub::pdActiveNeodainInfo(::grpc::ClientContext* context, const ::NULL_MSG& request, ::ACTIVE_NEODAIN_INFO* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_pdActiveNeodainInfo_, context, request, response);
}

void ActiveNeodainInfoService::Stub::experimental_async::pdActiveNeodainInfo(::grpc::ClientContext* context, const ::NULL_MSG* request, ::ACTIVE_NEODAIN_INFO* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_pdActiveNeodainInfo_, context, request, response, std::move(f));
}

void ActiveNeodainInfoService::Stub::experimental_async::pdActiveNeodainInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ACTIVE_NEODAIN_INFO* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_pdActiveNeodainInfo_, context, request, response, std::move(f));
}

void ActiveNeodainInfoService::Stub::experimental_async::pdActiveNeodainInfo(::grpc::ClientContext* context, const ::NULL_MSG* request, ::ACTIVE_NEODAIN_INFO* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_pdActiveNeodainInfo_, context, request, response, reactor);
}

void ActiveNeodainInfoService::Stub::experimental_async::pdActiveNeodainInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ACTIVE_NEODAIN_INFO* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_pdActiveNeodainInfo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ACTIVE_NEODAIN_INFO>* ActiveNeodainInfoService::Stub::AsyncpdActiveNeodainInfoRaw(::grpc::ClientContext* context, const ::NULL_MSG& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ACTIVE_NEODAIN_INFO>::Create(channel_.get(), cq, rpcmethod_pdActiveNeodainInfo_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::ACTIVE_NEODAIN_INFO>* ActiveNeodainInfoService::Stub::PrepareAsyncpdActiveNeodainInfoRaw(::grpc::ClientContext* context, const ::NULL_MSG& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ACTIVE_NEODAIN_INFO>::Create(channel_.get(), cq, rpcmethod_pdActiveNeodainInfo_, context, request, false);
}

ActiveNeodainInfoService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ActiveNeodainInfoService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ActiveNeodainInfoService::Service, ::NULL_MSG, ::ACTIVE_NEODAIN_INFO>(
          [](ActiveNeodainInfoService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::NULL_MSG* req,
             ::ACTIVE_NEODAIN_INFO* resp) {
               return service->pdActiveNeodainInfo(ctx, req, resp);
             }, this)));
}

ActiveNeodainInfoService::Service::~Service() {
}

::grpc::Status ActiveNeodainInfoService::Service::pdActiveNeodainInfo(::grpc::ServerContext* context, const ::NULL_MSG* request, ::ACTIVE_NEODAIN_INFO* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


