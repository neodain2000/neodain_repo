// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Neodain.proto

#include "Neodain.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_Neodain_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NEODAIN_EVENT_Neodain_2eproto;
class NEODAIN_EVENTDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NEODAIN_EVENT> _instance;
} _NEODAIN_EVENT_default_instance_;
class NEODAIN_EVENT_RESPDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NEODAIN_EVENT_RESP> _instance;
} _NEODAIN_EVENT_RESP_default_instance_;
class ACTIVE_NEODAIN_INFODefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ACTIVE_NEODAIN_INFO> _instance;
} _ACTIVE_NEODAIN_INFO_default_instance_;
class NULL_MSGDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NULL_MSG> _instance;
} _NULL_MSG_default_instance_;
static void InitDefaultsscc_info_ACTIVE_NEODAIN_INFO_Neodain_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ACTIVE_NEODAIN_INFO_default_instance_;
    new (ptr) ::ACTIVE_NEODAIN_INFO();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ACTIVE_NEODAIN_INFO::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ACTIVE_NEODAIN_INFO_Neodain_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ACTIVE_NEODAIN_INFO_Neodain_2eproto}, {
      &scc_info_NEODAIN_EVENT_Neodain_2eproto.base,}};

static void InitDefaultsscc_info_NEODAIN_EVENT_Neodain_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_NEODAIN_EVENT_default_instance_;
    new (ptr) ::NEODAIN_EVENT();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NEODAIN_EVENT::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NEODAIN_EVENT_Neodain_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NEODAIN_EVENT_Neodain_2eproto}, {}};

static void InitDefaultsscc_info_NEODAIN_EVENT_RESP_Neodain_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_NEODAIN_EVENT_RESP_default_instance_;
    new (ptr) ::NEODAIN_EVENT_RESP();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NEODAIN_EVENT_RESP::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NEODAIN_EVENT_RESP_Neodain_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NEODAIN_EVENT_RESP_Neodain_2eproto}, {}};

static void InitDefaultsscc_info_NULL_MSG_Neodain_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_NULL_MSG_default_instance_;
    new (ptr) ::NULL_MSG();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NULL_MSG::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NULL_MSG_Neodain_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NULL_MSG_Neodain_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Neodain_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_Neodain_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Neodain_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_Neodain_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::NEODAIN_EVENT, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::NEODAIN_EVENT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NEODAIN_EVENT, index_),
  PROTOBUF_FIELD_OFFSET(::NEODAIN_EVENT, msgcnt_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::NEODAIN_EVENT_RESP, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::NEODAIN_EVENT_RESP, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NEODAIN_EVENT_RESP, result_),
  PROTOBUF_FIELD_OFFSET(::NEODAIN_EVENT_RESP, reason_),
  1,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ACTIVE_NEODAIN_INFO, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ACTIVE_NEODAIN_INFO, tracecmflist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NULL_MSG, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::NEODAIN_EVENT)},
  { 9, 16, sizeof(::NEODAIN_EVENT_RESP)},
  { 18, -1, sizeof(::ACTIVE_NEODAIN_INFO)},
  { 24, -1, sizeof(::NULL_MSG)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_NEODAIN_EVENT_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_NEODAIN_EVENT_RESP_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ACTIVE_NEODAIN_INFO_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_NULL_MSG_default_instance_),
};

const char descriptor_table_protodef_Neodain_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rNeodain.proto\".\n\rNEODAIN_EVENT\022\r\n\005inde"
  "x\030\001 \001(\r\022\016\n\006msgCnt\030\002 \001(\r\"4\n\022NEODAIN_EVENT"
  "_RESP\022\016\n\006result\030\001 \001(\r\022\016\n\006reason\030\002 \001(\t\";\n"
  "\023ACTIVE_NEODAIN_INFO\022$\n\014traceCmfList\030\001 \003"
  "(\0132\016.NEODAIN_EVENT\"\n\n\010NULL_MSG2L\n\023Neodai"
  "nEventService\0225\n\016pdNeodainEvent\022\016.NEODAI"
  "N_EVENT\032\023.NEODAIN_EVENT_RESP2R\n\030ActiveNe"
  "odainInfoService\0226\n\023pdActiveNeodainInfo\022"
  "\t.NULL_MSG\032\024.ACTIVE_NEODAIN_INFO"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_Neodain_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_Neodain_2eproto_sccs[4] = {
  &scc_info_ACTIVE_NEODAIN_INFO_Neodain_2eproto.base,
  &scc_info_NEODAIN_EVENT_Neodain_2eproto.base,
  &scc_info_NEODAIN_EVENT_RESP_Neodain_2eproto.base,
  &scc_info_NULL_MSG_Neodain_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Neodain_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Neodain_2eproto = {
  false, false, descriptor_table_protodef_Neodain_2eproto, "Neodain.proto", 352,
  &descriptor_table_Neodain_2eproto_once, descriptor_table_Neodain_2eproto_sccs, descriptor_table_Neodain_2eproto_deps, 4, 0,
  schemas, file_default_instances, TableStruct_Neodain_2eproto::offsets,
  file_level_metadata_Neodain_2eproto, 4, file_level_enum_descriptors_Neodain_2eproto, file_level_service_descriptors_Neodain_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_Neodain_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_Neodain_2eproto)), true);

// ===================================================================

void NEODAIN_EVENT::InitAsDefaultInstance() {
}
class NEODAIN_EVENT::_Internal {
 public:
  using HasBits = decltype(std::declval<NEODAIN_EVENT>()._has_bits_);
  static void set_has_index(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_msgcnt(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

NEODAIN_EVENT::NEODAIN_EVENT(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:NEODAIN_EVENT)
}
NEODAIN_EVENT::NEODAIN_EVENT(const NEODAIN_EVENT& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&index_, &from.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&msgcnt_) -
    reinterpret_cast<char*>(&index_)) + sizeof(msgcnt_));
  // @@protoc_insertion_point(copy_constructor:NEODAIN_EVENT)
}

void NEODAIN_EVENT::SharedCtor() {
  ::memset(&index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&msgcnt_) -
      reinterpret_cast<char*>(&index_)) + sizeof(msgcnt_));
}

NEODAIN_EVENT::~NEODAIN_EVENT() {
  // @@protoc_insertion_point(destructor:NEODAIN_EVENT)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NEODAIN_EVENT::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void NEODAIN_EVENT::ArenaDtor(void* object) {
  NEODAIN_EVENT* _this = reinterpret_cast< NEODAIN_EVENT* >(object);
  (void)_this;
}
void NEODAIN_EVENT::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NEODAIN_EVENT::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NEODAIN_EVENT& NEODAIN_EVENT::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NEODAIN_EVENT_Neodain_2eproto.base);
  return *internal_default_instance();
}


void NEODAIN_EVENT::Clear() {
// @@protoc_insertion_point(message_clear_start:NEODAIN_EVENT)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&msgcnt_) -
        reinterpret_cast<char*>(&index_)) + sizeof(msgcnt_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NEODAIN_EVENT::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_index(&has_bits);
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 msgCnt = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_msgcnt(&has_bits);
          msgcnt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NEODAIN_EVENT::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NEODAIN_EVENT)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 index = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_index(), target);
  }

  // optional uint32 msgCnt = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_msgcnt(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NEODAIN_EVENT)
  return target;
}

size_t NEODAIN_EVENT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NEODAIN_EVENT)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 index = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_index());
    }

    // optional uint32 msgCnt = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_msgcnt());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NEODAIN_EVENT::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NEODAIN_EVENT)
  GOOGLE_DCHECK_NE(&from, this);
  const NEODAIN_EVENT* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NEODAIN_EVENT>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NEODAIN_EVENT)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NEODAIN_EVENT)
    MergeFrom(*source);
  }
}

void NEODAIN_EVENT::MergeFrom(const NEODAIN_EVENT& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NEODAIN_EVENT)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      index_ = from.index_;
    }
    if (cached_has_bits & 0x00000002u) {
      msgcnt_ = from.msgcnt_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void NEODAIN_EVENT::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NEODAIN_EVENT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NEODAIN_EVENT::CopyFrom(const NEODAIN_EVENT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NEODAIN_EVENT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NEODAIN_EVENT::IsInitialized() const {
  return true;
}

void NEODAIN_EVENT::InternalSwap(NEODAIN_EVENT* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NEODAIN_EVENT, msgcnt_)
      + sizeof(NEODAIN_EVENT::msgcnt_)
      - PROTOBUF_FIELD_OFFSET(NEODAIN_EVENT, index_)>(
          reinterpret_cast<char*>(&index_),
          reinterpret_cast<char*>(&other->index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NEODAIN_EVENT::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NEODAIN_EVENT_RESP::InitAsDefaultInstance() {
}
class NEODAIN_EVENT_RESP::_Internal {
 public:
  using HasBits = decltype(std::declval<NEODAIN_EVENT_RESP>()._has_bits_);
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_reason(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

NEODAIN_EVENT_RESP::NEODAIN_EVENT_RESP(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:NEODAIN_EVENT_RESP)
}
NEODAIN_EVENT_RESP::NEODAIN_EVENT_RESP(const NEODAIN_EVENT_RESP& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_reason()) {
    reason_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_reason(),
      GetArena());
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:NEODAIN_EVENT_RESP)
}

void NEODAIN_EVENT_RESP::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NEODAIN_EVENT_RESP_Neodain_2eproto.base);
  reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  result_ = 0u;
}

NEODAIN_EVENT_RESP::~NEODAIN_EVENT_RESP() {
  // @@protoc_insertion_point(destructor:NEODAIN_EVENT_RESP)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NEODAIN_EVENT_RESP::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  reason_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NEODAIN_EVENT_RESP::ArenaDtor(void* object) {
  NEODAIN_EVENT_RESP* _this = reinterpret_cast< NEODAIN_EVENT_RESP* >(object);
  (void)_this;
}
void NEODAIN_EVENT_RESP::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NEODAIN_EVENT_RESP::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NEODAIN_EVENT_RESP& NEODAIN_EVENT_RESP::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NEODAIN_EVENT_RESP_Neodain_2eproto.base);
  return *internal_default_instance();
}


void NEODAIN_EVENT_RESP::Clear() {
// @@protoc_insertion_point(message_clear_start:NEODAIN_EVENT_RESP)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    reason_.ClearNonDefaultToEmpty();
  }
  result_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NEODAIN_EVENT_RESP::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_result(&has_bits);
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string reason = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_reason();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "NEODAIN_EVENT_RESP.reason");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NEODAIN_EVENT_RESP::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NEODAIN_EVENT_RESP)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 result = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_result(), target);
  }

  // optional string reason = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_reason().data(), static_cast<int>(this->_internal_reason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "NEODAIN_EVENT_RESP.reason");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_reason(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NEODAIN_EVENT_RESP)
  return target;
}

size_t NEODAIN_EVENT_RESP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NEODAIN_EVENT_RESP)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string reason = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_reason());
    }

    // optional uint32 result = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_result());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NEODAIN_EVENT_RESP::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NEODAIN_EVENT_RESP)
  GOOGLE_DCHECK_NE(&from, this);
  const NEODAIN_EVENT_RESP* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NEODAIN_EVENT_RESP>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NEODAIN_EVENT_RESP)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NEODAIN_EVENT_RESP)
    MergeFrom(*source);
  }
}

void NEODAIN_EVENT_RESP::MergeFrom(const NEODAIN_EVENT_RESP& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NEODAIN_EVENT_RESP)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_reason(from._internal_reason());
    }
    if (cached_has_bits & 0x00000002u) {
      result_ = from.result_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void NEODAIN_EVENT_RESP::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NEODAIN_EVENT_RESP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NEODAIN_EVENT_RESP::CopyFrom(const NEODAIN_EVENT_RESP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NEODAIN_EVENT_RESP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NEODAIN_EVENT_RESP::IsInitialized() const {
  return true;
}

void NEODAIN_EVENT_RESP::InternalSwap(NEODAIN_EVENT_RESP* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  reason_.Swap(&other->reason_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NEODAIN_EVENT_RESP::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ACTIVE_NEODAIN_INFO::InitAsDefaultInstance() {
}
class ACTIVE_NEODAIN_INFO::_Internal {
 public:
};

ACTIVE_NEODAIN_INFO::ACTIVE_NEODAIN_INFO(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  tracecmflist_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ACTIVE_NEODAIN_INFO)
}
ACTIVE_NEODAIN_INFO::ACTIVE_NEODAIN_INFO(const ACTIVE_NEODAIN_INFO& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      tracecmflist_(from.tracecmflist_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ACTIVE_NEODAIN_INFO)
}

void ACTIVE_NEODAIN_INFO::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ACTIVE_NEODAIN_INFO_Neodain_2eproto.base);
}

ACTIVE_NEODAIN_INFO::~ACTIVE_NEODAIN_INFO() {
  // @@protoc_insertion_point(destructor:ACTIVE_NEODAIN_INFO)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ACTIVE_NEODAIN_INFO::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ACTIVE_NEODAIN_INFO::ArenaDtor(void* object) {
  ACTIVE_NEODAIN_INFO* _this = reinterpret_cast< ACTIVE_NEODAIN_INFO* >(object);
  (void)_this;
}
void ACTIVE_NEODAIN_INFO::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ACTIVE_NEODAIN_INFO::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ACTIVE_NEODAIN_INFO& ACTIVE_NEODAIN_INFO::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ACTIVE_NEODAIN_INFO_Neodain_2eproto.base);
  return *internal_default_instance();
}


void ACTIVE_NEODAIN_INFO::Clear() {
// @@protoc_insertion_point(message_clear_start:ACTIVE_NEODAIN_INFO)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tracecmflist_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ACTIVE_NEODAIN_INFO::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .NEODAIN_EVENT traceCmfList = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tracecmflist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ACTIVE_NEODAIN_INFO::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ACTIVE_NEODAIN_INFO)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .NEODAIN_EVENT traceCmfList = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tracecmflist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_tracecmflist(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ACTIVE_NEODAIN_INFO)
  return target;
}

size_t ACTIVE_NEODAIN_INFO::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ACTIVE_NEODAIN_INFO)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .NEODAIN_EVENT traceCmfList = 1;
  total_size += 1UL * this->_internal_tracecmflist_size();
  for (const auto& msg : this->tracecmflist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ACTIVE_NEODAIN_INFO::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ACTIVE_NEODAIN_INFO)
  GOOGLE_DCHECK_NE(&from, this);
  const ACTIVE_NEODAIN_INFO* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ACTIVE_NEODAIN_INFO>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ACTIVE_NEODAIN_INFO)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ACTIVE_NEODAIN_INFO)
    MergeFrom(*source);
  }
}

void ACTIVE_NEODAIN_INFO::MergeFrom(const ACTIVE_NEODAIN_INFO& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ACTIVE_NEODAIN_INFO)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tracecmflist_.MergeFrom(from.tracecmflist_);
}

void ACTIVE_NEODAIN_INFO::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ACTIVE_NEODAIN_INFO)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ACTIVE_NEODAIN_INFO::CopyFrom(const ACTIVE_NEODAIN_INFO& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ACTIVE_NEODAIN_INFO)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ACTIVE_NEODAIN_INFO::IsInitialized() const {
  return true;
}

void ACTIVE_NEODAIN_INFO::InternalSwap(ACTIVE_NEODAIN_INFO* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  tracecmflist_.InternalSwap(&other->tracecmflist_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ACTIVE_NEODAIN_INFO::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NULL_MSG::InitAsDefaultInstance() {
}
class NULL_MSG::_Internal {
 public:
};

NULL_MSG::NULL_MSG(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:NULL_MSG)
}
NULL_MSG::NULL_MSG(const NULL_MSG& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:NULL_MSG)
}

void NULL_MSG::SharedCtor() {
}

NULL_MSG::~NULL_MSG() {
  // @@protoc_insertion_point(destructor:NULL_MSG)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NULL_MSG::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void NULL_MSG::ArenaDtor(void* object) {
  NULL_MSG* _this = reinterpret_cast< NULL_MSG* >(object);
  (void)_this;
}
void NULL_MSG::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NULL_MSG::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NULL_MSG& NULL_MSG::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NULL_MSG_Neodain_2eproto.base);
  return *internal_default_instance();
}


void NULL_MSG::Clear() {
// @@protoc_insertion_point(message_clear_start:NULL_MSG)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NULL_MSG::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NULL_MSG::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NULL_MSG)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NULL_MSG)
  return target;
}

size_t NULL_MSG::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NULL_MSG)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NULL_MSG::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NULL_MSG)
  GOOGLE_DCHECK_NE(&from, this);
  const NULL_MSG* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NULL_MSG>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NULL_MSG)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NULL_MSG)
    MergeFrom(*source);
  }
}

void NULL_MSG::MergeFrom(const NULL_MSG& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NULL_MSG)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void NULL_MSG::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NULL_MSG)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NULL_MSG::CopyFrom(const NULL_MSG& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NULL_MSG)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NULL_MSG::IsInitialized() const {
  return true;
}

void NULL_MSG::InternalSwap(NULL_MSG* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NULL_MSG::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::NEODAIN_EVENT* Arena::CreateMaybeMessage< ::NEODAIN_EVENT >(Arena* arena) {
  return Arena::CreateMessageInternal< ::NEODAIN_EVENT >(arena);
}
template<> PROTOBUF_NOINLINE ::NEODAIN_EVENT_RESP* Arena::CreateMaybeMessage< ::NEODAIN_EVENT_RESP >(Arena* arena) {
  return Arena::CreateMessageInternal< ::NEODAIN_EVENT_RESP >(arena);
}
template<> PROTOBUF_NOINLINE ::ACTIVE_NEODAIN_INFO* Arena::CreateMaybeMessage< ::ACTIVE_NEODAIN_INFO >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ACTIVE_NEODAIN_INFO >(arena);
}
template<> PROTOBUF_NOINLINE ::NULL_MSG* Arena::CreateMaybeMessage< ::NULL_MSG >(Arena* arena) {
  return Arena::CreateMessageInternal< ::NULL_MSG >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
