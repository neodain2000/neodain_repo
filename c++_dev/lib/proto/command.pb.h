// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: command.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_command_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_command_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/descriptor.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_command_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_command_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_command_2eproto;
namespace Cmf {
class CommandList;
class CommandListDefaultTypeInternal;
extern CommandListDefaultTypeInternal _CommandList_default_instance_;
class InterfaceInfo;
class InterfaceInfoDefaultTypeInternal;
extern InterfaceInfoDefaultTypeInternal _InterfaceInfo_default_instance_;
class OneCommand;
class OneCommandDefaultTypeInternal;
extern OneCommandDefaultTypeInternal _OneCommand_default_instance_;
class Operation;
class OperationDefaultTypeInternal;
extern OperationDefaultTypeInternal _Operation_default_instance_;
class Parameter;
class ParameterDefaultTypeInternal;
extern ParameterDefaultTypeInternal _Parameter_default_instance_;
class Request;
class RequestDefaultTypeInternal;
extern RequestDefaultTypeInternal _Request_default_instance_;
class Response;
class ResponseDefaultTypeInternal;
extern ResponseDefaultTypeInternal _Response_default_instance_;
class cmdOptions;
class cmdOptionsDefaultTypeInternal;
extern cmdOptionsDefaultTypeInternal _cmdOptions_default_instance_;
}  // namespace Cmf
PROTOBUF_NAMESPACE_OPEN
template<> ::Cmf::CommandList* Arena::CreateMaybeMessage<::Cmf::CommandList>(Arena*);
template<> ::Cmf::InterfaceInfo* Arena::CreateMaybeMessage<::Cmf::InterfaceInfo>(Arena*);
template<> ::Cmf::OneCommand* Arena::CreateMaybeMessage<::Cmf::OneCommand>(Arena*);
template<> ::Cmf::Operation* Arena::CreateMaybeMessage<::Cmf::Operation>(Arena*);
template<> ::Cmf::Parameter* Arena::CreateMaybeMessage<::Cmf::Parameter>(Arena*);
template<> ::Cmf::Request* Arena::CreateMaybeMessage<::Cmf::Request>(Arena*);
template<> ::Cmf::Response* Arena::CreateMaybeMessage<::Cmf::Response>(Arena*);
template<> ::Cmf::cmdOptions* Arena::CreateMaybeMessage<::Cmf::cmdOptions>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Cmf {

enum Parameter_Type : int {
  Parameter_Type_BOOLEAN = 0,
  Parameter_Type_INTEGER = 10,
  Parameter_Type_STRING = 20,
  Parameter_Type_ENUM = 30
};
bool Parameter_Type_IsValid(int value);
constexpr Parameter_Type Parameter_Type_Type_MIN = Parameter_Type_BOOLEAN;
constexpr Parameter_Type Parameter_Type_Type_MAX = Parameter_Type_ENUM;
constexpr int Parameter_Type_Type_ARRAYSIZE = Parameter_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Parameter_Type_descriptor();
template<typename T>
inline const std::string& Parameter_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Parameter_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Parameter_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Parameter_Type_descriptor(), enum_t_value);
}
inline bool Parameter_Type_Parse(
    const std::string& name, Parameter_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Parameter_Type>(
    Parameter_Type_descriptor(), name, value);
}
enum cmdOptions_Type : int {
  cmdOptions_Type_NOT = 1,
  cmdOptions_Type_OPT = 2,
  cmdOptions_Type_MAN = 3
};
bool cmdOptions_Type_IsValid(int value);
constexpr cmdOptions_Type cmdOptions_Type_Type_MIN = cmdOptions_Type_NOT;
constexpr cmdOptions_Type cmdOptions_Type_Type_MAX = cmdOptions_Type_MAN;
constexpr int cmdOptions_Type_Type_ARRAYSIZE = cmdOptions_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* cmdOptions_Type_descriptor();
template<typename T>
inline const std::string& cmdOptions_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, cmdOptions_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function cmdOptions_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    cmdOptions_Type_descriptor(), enum_t_value);
}
inline bool cmdOptions_Type_Parse(
    const std::string& name, cmdOptions_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<cmdOptions_Type>(
    cmdOptions_Type_descriptor(), name, value);
}
// ===================================================================

class Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Cmf.Request) */ {
 public:
  inline Request() : Request(nullptr) {};
  virtual ~Request();

  Request(const Request& from);
  Request(Request&& from) noexcept
    : Request() {
    *this = ::std::move(from);
  }

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline Request& operator=(Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Request* internal_default_instance() {
    return reinterpret_cast<const Request*>(
               &_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Request& a, Request& b) {
    a.Swap(&b);
  }
  inline void Swap(Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Request* New() const final {
    return CreateMaybeMessage<Request>(nullptr);
  }

  Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Request& from);
  void MergeFrom(const Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Cmf.Request";
  }
  protected:
  explicit Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_command_2eproto);
    return ::descriptor_table_command_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kJsonFieldNumber = 2,
    kNumFieldNumber = 1,
  };
  // optional string json = 2;
  bool has_json() const;
  private:
  bool _internal_has_json() const;
  public:
  void clear_json();
  const std::string& json() const;
  void set_json(const std::string& value);
  void set_json(std::string&& value);
  void set_json(const char* value);
  void set_json(const char* value, size_t size);
  std::string* mutable_json();
  std::string* release_json();
  void set_allocated_json(std::string* json);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_json();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_json(
      std::string* json);
  private:
  const std::string& _internal_json() const;
  void _internal_set_json(const std::string& value);
  std::string* _internal_mutable_json();
  public:

  // required int32 num = 1;
  bool has_num() const;
  private:
  bool _internal_has_num() const;
  public:
  void clear_num();
  ::PROTOBUF_NAMESPACE_ID::int32 num() const;
  void set_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_num() const;
  void _internal_set_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Cmf.Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr json_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_;
  friend struct ::TableStruct_command_2eproto;
};
// -------------------------------------------------------------------

class Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Cmf.Response) */ {
 public:
  inline Response() : Response(nullptr) {};
  virtual ~Response();

  Response(const Response& from);
  Response(Response&& from) noexcept
    : Response() {
    *this = ::std::move(from);
  }

  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline Response& operator=(Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Response* internal_default_instance() {
    return reinterpret_cast<const Response*>(
               &_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Response& a, Response& b) {
    a.Swap(&b);
  }
  inline void Swap(Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Response* New() const final {
    return CreateMaybeMessage<Response>(nullptr);
  }

  Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Response& from);
  void MergeFrom(const Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Cmf.Response";
  }
  protected:
  explicit Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_command_2eproto);
    return ::descriptor_table_command_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 2,
    kSuccessFieldNumber = 1,
  };
  // required string msg = 2;
  bool has_msg() const;
  private:
  bool _internal_has_msg() const;
  public:
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_msg();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_msg(
      std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // required bool success = 1;
  bool has_success() const;
  private:
  bool _internal_has_success() const;
  public:
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Cmf.Response)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  bool success_;
  friend struct ::TableStruct_command_2eproto;
};
// -------------------------------------------------------------------

class CommandList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Cmf.CommandList) */ {
 public:
  inline CommandList() : CommandList(nullptr) {};
  virtual ~CommandList();

  CommandList(const CommandList& from);
  CommandList(CommandList&& from) noexcept
    : CommandList() {
    *this = ::std::move(from);
  }

  inline CommandList& operator=(const CommandList& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandList& operator=(CommandList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CommandList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CommandList* internal_default_instance() {
    return reinterpret_cast<const CommandList*>(
               &_CommandList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CommandList& a, CommandList& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommandList* New() const final {
    return CreateMaybeMessage<CommandList>(nullptr);
  }

  CommandList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommandList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CommandList& from);
  void MergeFrom(const CommandList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Cmf.CommandList";
  }
  protected:
  explicit CommandList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_command_2eproto);
    return ::descriptor_table_command_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommandListFieldNumber = 200,
    kCategoryFieldNumber = 100,
  };
  // repeated .Cmf.OneCommand commandList = 200;
  int commandlist_size() const;
  private:
  int _internal_commandlist_size() const;
  public:
  void clear_commandlist();
  ::Cmf::OneCommand* mutable_commandlist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Cmf::OneCommand >*
      mutable_commandlist();
  private:
  const ::Cmf::OneCommand& _internal_commandlist(int index) const;
  ::Cmf::OneCommand* _internal_add_commandlist();
  public:
  const ::Cmf::OneCommand& commandlist(int index) const;
  ::Cmf::OneCommand* add_commandlist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Cmf::OneCommand >&
      commandlist() const;

  // optional string category = 100;
  bool has_category() const;
  private:
  bool _internal_has_category() const;
  public:
  void clear_category();
  const std::string& category() const;
  void set_category(const std::string& value);
  void set_category(std::string&& value);
  void set_category(const char* value);
  void set_category(const char* value, size_t size);
  std::string* mutable_category();
  std::string* release_category();
  void set_allocated_category(std::string* category);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_category();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_category(
      std::string* category);
  private:
  const std::string& _internal_category() const;
  void _internal_set_category(const std::string& value);
  std::string* _internal_mutable_category();
  public:

  // @@protoc_insertion_point(class_scope:Cmf.CommandList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Cmf::OneCommand > commandlist_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr category_;
  friend struct ::TableStruct_command_2eproto;
};
// -------------------------------------------------------------------

class OneCommand PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Cmf.OneCommand) */ {
 public:
  inline OneCommand() : OneCommand(nullptr) {};
  virtual ~OneCommand();

  OneCommand(const OneCommand& from);
  OneCommand(OneCommand&& from) noexcept
    : OneCommand() {
    *this = ::std::move(from);
  }

  inline OneCommand& operator=(const OneCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline OneCommand& operator=(OneCommand&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OneCommand& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OneCommand* internal_default_instance() {
    return reinterpret_cast<const OneCommand*>(
               &_OneCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(OneCommand& a, OneCommand& b) {
    a.Swap(&b);
  }
  inline void Swap(OneCommand* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OneCommand* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OneCommand* New() const final {
    return CreateMaybeMessage<OneCommand>(nullptr);
  }

  OneCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OneCommand>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OneCommand& from);
  void MergeFrom(const OneCommand& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OneCommand* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Cmf.OneCommand";
  }
  protected:
  explicit OneCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_command_2eproto);
    return ::descriptor_table_command_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParameterListFieldNumber = 200,
    kNameFieldNumber = 100,
    kDescriptionFieldNumber = 110,
    kInterfaceInfoFieldNumber = 120,
    kConfirmFieldNumber = 160,
    kUserlevelFieldNumber = 170,
  };
  // repeated .Cmf.Parameter parameterList = 200;
  int parameterlist_size() const;
  private:
  int _internal_parameterlist_size() const;
  public:
  void clear_parameterlist();
  ::Cmf::Parameter* mutable_parameterlist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Cmf::Parameter >*
      mutable_parameterlist();
  private:
  const ::Cmf::Parameter& _internal_parameterlist(int index) const;
  ::Cmf::Parameter* _internal_add_parameterlist();
  public:
  const ::Cmf::Parameter& parameterlist(int index) const;
  ::Cmf::Parameter* add_parameterlist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Cmf::Parameter >&
      parameterlist() const;

  // required string name = 100;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // required string description = 110;
  bool has_description() const;
  private:
  bool _internal_has_description() const;
  public:
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_description();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_description(
      std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // required .Cmf.InterfaceInfo interfaceInfo = 120;
  bool has_interfaceinfo() const;
  private:
  bool _internal_has_interfaceinfo() const;
  public:
  void clear_interfaceinfo();
  const ::Cmf::InterfaceInfo& interfaceinfo() const;
  ::Cmf::InterfaceInfo* release_interfaceinfo();
  ::Cmf::InterfaceInfo* mutable_interfaceinfo();
  void set_allocated_interfaceinfo(::Cmf::InterfaceInfo* interfaceinfo);
  private:
  const ::Cmf::InterfaceInfo& _internal_interfaceinfo() const;
  ::Cmf::InterfaceInfo* _internal_mutable_interfaceinfo();
  public:
  void unsafe_arena_set_allocated_interfaceinfo(
      ::Cmf::InterfaceInfo* interfaceinfo);
  ::Cmf::InterfaceInfo* unsafe_arena_release_interfaceinfo();

  // optional bool confirm = 160;
  bool has_confirm() const;
  private:
  bool _internal_has_confirm() const;
  public:
  void clear_confirm();
  bool confirm() const;
  void set_confirm(bool value);
  private:
  bool _internal_confirm() const;
  void _internal_set_confirm(bool value);
  public:

  // optional int32 userlevel = 170;
  bool has_userlevel() const;
  private:
  bool _internal_has_userlevel() const;
  public:
  void clear_userlevel();
  ::PROTOBUF_NAMESPACE_ID::int32 userlevel() const;
  void set_userlevel(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_userlevel() const;
  void _internal_set_userlevel(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(OneCommand)
  // @@protoc_insertion_point(class_scope:Cmf.OneCommand)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::ExtensionSet _extensions_;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Cmf::Parameter > parameterlist_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::Cmf::InterfaceInfo* interfaceinfo_;
  bool confirm_;
  ::PROTOBUF_NAMESPACE_ID::int32 userlevel_;
  friend struct ::TableStruct_command_2eproto;
};
// -------------------------------------------------------------------

class Parameter PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Cmf.Parameter) */ {
 public:
  inline Parameter() : Parameter(nullptr) {};
  virtual ~Parameter();

  Parameter(const Parameter& from);
  Parameter(Parameter&& from) noexcept
    : Parameter() {
    *this = ::std::move(from);
  }

  inline Parameter& operator=(const Parameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline Parameter& operator=(Parameter&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Parameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Parameter* internal_default_instance() {
    return reinterpret_cast<const Parameter*>(
               &_Parameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Parameter& a, Parameter& b) {
    a.Swap(&b);
  }
  inline void Swap(Parameter* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Parameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Parameter* New() const final {
    return CreateMaybeMessage<Parameter>(nullptr);
  }

  Parameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Parameter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Parameter& from);
  void MergeFrom(const Parameter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Parameter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Cmf.Parameter";
  }
  protected:
  explicit Parameter(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_command_2eproto);
    return ::descriptor_table_command_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Parameter_Type Type;
  static constexpr Type BOOLEAN =
    Parameter_Type_BOOLEAN;
  static constexpr Type INTEGER =
    Parameter_Type_INTEGER;
  static constexpr Type STRING =
    Parameter_Type_STRING;
  static constexpr Type ENUM =
    Parameter_Type_ENUM;
  static inline bool Type_IsValid(int value) {
    return Parameter_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    Parameter_Type_Type_MIN;
  static constexpr Type Type_MAX =
    Parameter_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    Parameter_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return Parameter_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return Parameter_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(const std::string& name,
      Type* value) {
    return Parameter_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 100,
    kDescriptionFieldNumber = 300,
    kPropertyFieldNumber = 500,
    kDefaultValFieldNumber = 700,
    kTypeFieldNumber = 200,
    kMandatoryFieldNumber = 400,
    kHiddenFieldNumber = 600,
  };
  // optional string name = 100;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string description = 300;
  bool has_description() const;
  private:
  bool _internal_has_description() const;
  public:
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_description();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_description(
      std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // optional string property = 500;
  bool has_property() const;
  private:
  bool _internal_has_property() const;
  public:
  void clear_property();
  const std::string& property() const;
  void set_property(const std::string& value);
  void set_property(std::string&& value);
  void set_property(const char* value);
  void set_property(const char* value, size_t size);
  std::string* mutable_property();
  std::string* release_property();
  void set_allocated_property(std::string* property);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_property();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_property(
      std::string* property);
  private:
  const std::string& _internal_property() const;
  void _internal_set_property(const std::string& value);
  std::string* _internal_mutable_property();
  public:

  // optional string default_val = 700;
  bool has_default_val() const;
  private:
  bool _internal_has_default_val() const;
  public:
  void clear_default_val();
  const std::string& default_val() const;
  void set_default_val(const std::string& value);
  void set_default_val(std::string&& value);
  void set_default_val(const char* value);
  void set_default_val(const char* value, size_t size);
  std::string* mutable_default_val();
  std::string* release_default_val();
  void set_allocated_default_val(std::string* default_val);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_default_val();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_default_val(
      std::string* default_val);
  private:
  const std::string& _internal_default_val() const;
  void _internal_set_default_val(const std::string& value);
  std::string* _internal_mutable_default_val();
  public:

  // optional .Cmf.Parameter.Type type = 200;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::Cmf::Parameter_Type type() const;
  void set_type(::Cmf::Parameter_Type value);
  private:
  ::Cmf::Parameter_Type _internal_type() const;
  void _internal_set_type(::Cmf::Parameter_Type value);
  public:

  // optional bool mandatory = 400;
  bool has_mandatory() const;
  private:
  bool _internal_has_mandatory() const;
  public:
  void clear_mandatory();
  bool mandatory() const;
  void set_mandatory(bool value);
  private:
  bool _internal_mandatory() const;
  void _internal_set_mandatory(bool value);
  public:

  // optional bool hidden = 600;
  bool has_hidden() const;
  private:
  bool _internal_has_hidden() const;
  public:
  void clear_hidden();
  bool hidden() const;
  void set_hidden(bool value);
  private:
  bool _internal_hidden() const;
  void _internal_set_hidden(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Cmf.Parameter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr property_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr default_val_;
  int type_;
  bool mandatory_;
  bool hidden_;
  friend struct ::TableStruct_command_2eproto;
};
// -------------------------------------------------------------------

class Operation PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Cmf.Operation) */ {
 public:
  inline Operation() : Operation(nullptr) {};
  virtual ~Operation();

  Operation(const Operation& from);
  Operation(Operation&& from) noexcept
    : Operation() {
    *this = ::std::move(from);
  }

  inline Operation& operator=(const Operation& from) {
    CopyFrom(from);
    return *this;
  }
  inline Operation& operator=(Operation&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Operation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Operation* internal_default_instance() {
    return reinterpret_cast<const Operation*>(
               &_Operation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Operation& a, Operation& b) {
    a.Swap(&b);
  }
  inline void Swap(Operation* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Operation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Operation* New() const final {
    return CreateMaybeMessage<Operation>(nullptr);
  }

  Operation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Operation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Operation& from);
  void MergeFrom(const Operation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Operation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Cmf.Operation";
  }
  protected:
  explicit Operation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_command_2eproto);
    return ::descriptor_table_command_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOPERATIONFieldNumber = 1,
  };
  // optional string OPERATION = 1;
  bool has_operation() const;
  private:
  bool _internal_has_operation() const;
  public:
  void clear_operation();
  const std::string& operation() const;
  void set_operation(const std::string& value);
  void set_operation(std::string&& value);
  void set_operation(const char* value);
  void set_operation(const char* value, size_t size);
  std::string* mutable_operation();
  std::string* release_operation();
  void set_allocated_operation(std::string* operation);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_operation();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_operation(
      std::string* operation);
  private:
  const std::string& _internal_operation() const;
  void _internal_set_operation(const std::string& value);
  std::string* _internal_mutable_operation();
  public:

  // @@protoc_insertion_point(class_scope:Cmf.Operation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr operation_;
  friend struct ::TableStruct_command_2eproto;
};
// -------------------------------------------------------------------

class InterfaceInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Cmf.InterfaceInfo) */ {
 public:
  inline InterfaceInfo() : InterfaceInfo(nullptr) {};
  virtual ~InterfaceInfo();

  InterfaceInfo(const InterfaceInfo& from);
  InterfaceInfo(InterfaceInfo&& from) noexcept
    : InterfaceInfo() {
    *this = ::std::move(from);
  }

  inline InterfaceInfo& operator=(const InterfaceInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline InterfaceInfo& operator=(InterfaceInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InterfaceInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InterfaceInfo* internal_default_instance() {
    return reinterpret_cast<const InterfaceInfo*>(
               &_InterfaceInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(InterfaceInfo& a, InterfaceInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(InterfaceInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InterfaceInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InterfaceInfo* New() const final {
    return CreateMaybeMessage<InterfaceInfo>(nullptr);
  }

  InterfaceInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InterfaceInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InterfaceInfo& from);
  void MergeFrom(const InterfaceInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InterfaceInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Cmf.InterfaceInfo";
  }
  protected:
  explicit InterfaceInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_command_2eproto);
    return ::descriptor_table_command_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUriFieldNumber = 10,
    kMethodFieldNumber = 30,
    kNumFieldNumber = 20,
  };
  // required string uri = 10;
  bool has_uri() const;
  private:
  bool _internal_has_uri() const;
  public:
  void clear_uri();
  const std::string& uri() const;
  void set_uri(const std::string& value);
  void set_uri(std::string&& value);
  void set_uri(const char* value);
  void set_uri(const char* value, size_t size);
  std::string* mutable_uri();
  std::string* release_uri();
  void set_allocated_uri(std::string* uri);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_uri();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_uri(
      std::string* uri);
  private:
  const std::string& _internal_uri() const;
  void _internal_set_uri(const std::string& value);
  std::string* _internal_mutable_uri();
  public:

  // required string method = 30;
  bool has_method() const;
  private:
  bool _internal_has_method() const;
  public:
  void clear_method();
  const std::string& method() const;
  void set_method(const std::string& value);
  void set_method(std::string&& value);
  void set_method(const char* value);
  void set_method(const char* value, size_t size);
  std::string* mutable_method();
  std::string* release_method();
  void set_allocated_method(std::string* method);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_method();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_method(
      std::string* method);
  private:
  const std::string& _internal_method() const;
  void _internal_set_method(const std::string& value);
  std::string* _internal_mutable_method();
  public:

  // required int32 num = 20;
  bool has_num() const;
  private:
  bool _internal_has_num() const;
  public:
  void clear_num();
  ::PROTOBUF_NAMESPACE_ID::int32 num() const;
  void set_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_num() const;
  void _internal_set_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Cmf.InterfaceInfo)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uri_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr method_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_;
  friend struct ::TableStruct_command_2eproto;
};
// -------------------------------------------------------------------

class cmdOptions PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Cmf.cmdOptions) */ {
 public:
  inline cmdOptions() : cmdOptions(nullptr) {};
  virtual ~cmdOptions();

  cmdOptions(const cmdOptions& from);
  cmdOptions(cmdOptions&& from) noexcept
    : cmdOptions() {
    *this = ::std::move(from);
  }

  inline cmdOptions& operator=(const cmdOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline cmdOptions& operator=(cmdOptions&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const cmdOptions& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const cmdOptions* internal_default_instance() {
    return reinterpret_cast<const cmdOptions*>(
               &_cmdOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(cmdOptions& a, cmdOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(cmdOptions* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(cmdOptions* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline cmdOptions* New() const final {
    return CreateMaybeMessage<cmdOptions>(nullptr);
  }

  cmdOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<cmdOptions>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const cmdOptions& from);
  void MergeFrom(const cmdOptions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(cmdOptions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Cmf.cmdOptions";
  }
  protected:
  explicit cmdOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_command_2eproto);
    return ::descriptor_table_command_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef cmdOptions_Type Type;
  static constexpr Type NOT =
    cmdOptions_Type_NOT;
  static constexpr Type OPT =
    cmdOptions_Type_OPT;
  static constexpr Type MAN =
    cmdOptions_Type_MAN;
  static inline bool Type_IsValid(int value) {
    return cmdOptions_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    cmdOptions_Type_Type_MIN;
  static constexpr Type Type_MAX =
    cmdOptions_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    cmdOptions_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return cmdOptions_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return cmdOptions_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(const std::string& name,
      Type* value) {
    return cmdOptions_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kDisFieldNumber = 1,
    kCrteFieldNumber = 2,
    kChgFieldNumber = 3,
    kDelFieldNumber = 4,
  };
  // optional .Cmf.cmdOptions.Type dis = 1;
  bool has_dis() const;
  private:
  bool _internal_has_dis() const;
  public:
  void clear_dis();
  ::Cmf::cmdOptions_Type dis() const;
  void set_dis(::Cmf::cmdOptions_Type value);
  private:
  ::Cmf::cmdOptions_Type _internal_dis() const;
  void _internal_set_dis(::Cmf::cmdOptions_Type value);
  public:

  // optional .Cmf.cmdOptions.Type crte = 2;
  bool has_crte() const;
  private:
  bool _internal_has_crte() const;
  public:
  void clear_crte();
  ::Cmf::cmdOptions_Type crte() const;
  void set_crte(::Cmf::cmdOptions_Type value);
  private:
  ::Cmf::cmdOptions_Type _internal_crte() const;
  void _internal_set_crte(::Cmf::cmdOptions_Type value);
  public:

  // optional .Cmf.cmdOptions.Type chg = 3;
  bool has_chg() const;
  private:
  bool _internal_has_chg() const;
  public:
  void clear_chg();
  ::Cmf::cmdOptions_Type chg() const;
  void set_chg(::Cmf::cmdOptions_Type value);
  private:
  ::Cmf::cmdOptions_Type _internal_chg() const;
  void _internal_set_chg(::Cmf::cmdOptions_Type value);
  public:

  // optional .Cmf.cmdOptions.Type del = 4;
  bool has_del() const;
  private:
  bool _internal_has_del() const;
  public:
  void clear_del();
  ::Cmf::cmdOptions_Type del() const;
  void set_del(::Cmf::cmdOptions_Type value);
  private:
  ::Cmf::cmdOptions_Type _internal_del() const;
  void _internal_set_del(::Cmf::cmdOptions_Type value);
  public:

  // @@protoc_insertion_point(class_scope:Cmf.cmdOptions)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int dis_;
  int crte_;
  int chg_;
  int del_;
  friend struct ::TableStruct_command_2eproto;
};
// ===================================================================

static const int kCmdoptionFieldNumber = 2000;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::google::protobuf::FieldOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::Cmf::cmdOptions >, 11, false >
  cmdoption;
static const int kPropertyFieldNumber = 2001;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::google::protobuf::FieldOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::StringTypeTraits, 9, false >
  property;
static const int kHiddenFieldNumber = 2002;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::google::protobuf::FieldOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< bool >, 8, false >
  hidden;
static const int kDbkeyFieldNumber = 3000;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::google::protobuf::FieldOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< bool >, 8, false >
  dbkey;

// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Request

// required int32 num = 1;
inline bool Request::_internal_has_num() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Request::has_num() const {
  return _internal_has_num();
}
inline void Request::clear_num() {
  num_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Request::_internal_num() const {
  return num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Request::num() const {
  // @@protoc_insertion_point(field_get:Cmf.Request.num)
  return _internal_num();
}
inline void Request::_internal_set_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  num_ = value;
}
inline void Request::set_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_num(value);
  // @@protoc_insertion_point(field_set:Cmf.Request.num)
}

// optional string json = 2;
inline bool Request::_internal_has_json() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Request::has_json() const {
  return _internal_has_json();
}
inline void Request::clear_json() {
  json_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Request::json() const {
  // @@protoc_insertion_point(field_get:Cmf.Request.json)
  return _internal_json();
}
inline void Request::set_json(const std::string& value) {
  _internal_set_json(value);
  // @@protoc_insertion_point(field_set:Cmf.Request.json)
}
inline std::string* Request::mutable_json() {
  // @@protoc_insertion_point(field_mutable:Cmf.Request.json)
  return _internal_mutable_json();
}
inline const std::string& Request::_internal_json() const {
  return json_.Get();
}
inline void Request::_internal_set_json(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  json_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Request::set_json(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  json_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Cmf.Request.json)
}
inline void Request::set_json(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  json_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Cmf.Request.json)
}
inline void Request::set_json(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  json_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Cmf.Request.json)
}
inline std::string* Request::_internal_mutable_json() {
  _has_bits_[0] |= 0x00000001u;
  return json_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Request::release_json() {
  // @@protoc_insertion_point(field_release:Cmf.Request.json)
  if (!_internal_has_json()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return json_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Request::set_allocated_json(std::string* json) {
  if (json != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  json_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), json,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Cmf.Request.json)
}
inline std::string* Request::unsafe_arena_release_json() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Cmf.Request.json)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return json_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Request::unsafe_arena_set_allocated_json(
    std::string* json) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (json != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  json_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      json, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Cmf.Request.json)
}

// -------------------------------------------------------------------

// Response

// required bool success = 1;
inline bool Response::_internal_has_success() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Response::has_success() const {
  return _internal_has_success();
}
inline void Response::clear_success() {
  success_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool Response::_internal_success() const {
  return success_;
}
inline bool Response::success() const {
  // @@protoc_insertion_point(field_get:Cmf.Response.success)
  return _internal_success();
}
inline void Response::_internal_set_success(bool value) {
  _has_bits_[0] |= 0x00000002u;
  success_ = value;
}
inline void Response::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:Cmf.Response.success)
}

// required string msg = 2;
inline bool Response::_internal_has_msg() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Response::has_msg() const {
  return _internal_has_msg();
}
inline void Response::clear_msg() {
  msg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Response::msg() const {
  // @@protoc_insertion_point(field_get:Cmf.Response.msg)
  return _internal_msg();
}
inline void Response::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:Cmf.Response.msg)
}
inline std::string* Response::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:Cmf.Response.msg)
  return _internal_mutable_msg();
}
inline const std::string& Response::_internal_msg() const {
  return msg_.Get();
}
inline void Response::_internal_set_msg(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Response::set_msg(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  msg_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Cmf.Response.msg)
}
inline void Response::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Cmf.Response.msg)
}
inline void Response::set_msg(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Cmf.Response.msg)
}
inline std::string* Response::_internal_mutable_msg() {
  _has_bits_[0] |= 0x00000001u;
  return msg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Response::release_msg() {
  // @@protoc_insertion_point(field_release:Cmf.Response.msg)
  if (!_internal_has_msg()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return msg_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Response::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Cmf.Response.msg)
}
inline std::string* Response::unsafe_arena_release_msg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Cmf.Response.msg)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return msg_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Response::unsafe_arena_set_allocated_msg(
    std::string* msg) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (msg != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  msg_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      msg, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Cmf.Response.msg)
}

// -------------------------------------------------------------------

// CommandList

// optional string category = 100;
inline bool CommandList::_internal_has_category() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CommandList::has_category() const {
  return _internal_has_category();
}
inline void CommandList::clear_category() {
  category_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CommandList::category() const {
  // @@protoc_insertion_point(field_get:Cmf.CommandList.category)
  return _internal_category();
}
inline void CommandList::set_category(const std::string& value) {
  _internal_set_category(value);
  // @@protoc_insertion_point(field_set:Cmf.CommandList.category)
}
inline std::string* CommandList::mutable_category() {
  // @@protoc_insertion_point(field_mutable:Cmf.CommandList.category)
  return _internal_mutable_category();
}
inline const std::string& CommandList::_internal_category() const {
  return category_.Get();
}
inline void CommandList::_internal_set_category(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  category_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CommandList::set_category(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  category_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Cmf.CommandList.category)
}
inline void CommandList::set_category(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  category_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Cmf.CommandList.category)
}
inline void CommandList::set_category(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  category_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Cmf.CommandList.category)
}
inline std::string* CommandList::_internal_mutable_category() {
  _has_bits_[0] |= 0x00000001u;
  return category_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CommandList::release_category() {
  // @@protoc_insertion_point(field_release:Cmf.CommandList.category)
  if (!_internal_has_category()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return category_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CommandList::set_allocated_category(std::string* category) {
  if (category != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  category_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), category,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Cmf.CommandList.category)
}
inline std::string* CommandList::unsafe_arena_release_category() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Cmf.CommandList.category)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return category_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CommandList::unsafe_arena_set_allocated_category(
    std::string* category) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (category != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  category_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      category, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Cmf.CommandList.category)
}

// repeated .Cmf.OneCommand commandList = 200;
inline int CommandList::_internal_commandlist_size() const {
  return commandlist_.size();
}
inline int CommandList::commandlist_size() const {
  return _internal_commandlist_size();
}
inline void CommandList::clear_commandlist() {
  commandlist_.Clear();
}
inline ::Cmf::OneCommand* CommandList::mutable_commandlist(int index) {
  // @@protoc_insertion_point(field_mutable:Cmf.CommandList.commandList)
  return commandlist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Cmf::OneCommand >*
CommandList::mutable_commandlist() {
  // @@protoc_insertion_point(field_mutable_list:Cmf.CommandList.commandList)
  return &commandlist_;
}
inline const ::Cmf::OneCommand& CommandList::_internal_commandlist(int index) const {
  return commandlist_.Get(index);
}
inline const ::Cmf::OneCommand& CommandList::commandlist(int index) const {
  // @@protoc_insertion_point(field_get:Cmf.CommandList.commandList)
  return _internal_commandlist(index);
}
inline ::Cmf::OneCommand* CommandList::_internal_add_commandlist() {
  return commandlist_.Add();
}
inline ::Cmf::OneCommand* CommandList::add_commandlist() {
  // @@protoc_insertion_point(field_add:Cmf.CommandList.commandList)
  return _internal_add_commandlist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Cmf::OneCommand >&
CommandList::commandlist() const {
  // @@protoc_insertion_point(field_list:Cmf.CommandList.commandList)
  return commandlist_;
}

// -------------------------------------------------------------------

// OneCommand

// required string name = 100;
inline bool OneCommand::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool OneCommand::has_name() const {
  return _internal_has_name();
}
inline void OneCommand::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& OneCommand::name() const {
  // @@protoc_insertion_point(field_get:Cmf.OneCommand.name)
  return _internal_name();
}
inline void OneCommand::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:Cmf.OneCommand.name)
}
inline std::string* OneCommand::mutable_name() {
  // @@protoc_insertion_point(field_mutable:Cmf.OneCommand.name)
  return _internal_mutable_name();
}
inline const std::string& OneCommand::_internal_name() const {
  return name_.Get();
}
inline void OneCommand::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OneCommand::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Cmf.OneCommand.name)
}
inline void OneCommand::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Cmf.OneCommand.name)
}
inline void OneCommand::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Cmf.OneCommand.name)
}
inline std::string* OneCommand::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OneCommand::release_name() {
  // @@protoc_insertion_point(field_release:Cmf.OneCommand.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OneCommand::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Cmf.OneCommand.name)
}
inline std::string* OneCommand::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Cmf.OneCommand.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void OneCommand::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Cmf.OneCommand.name)
}

// required string description = 110;
inline bool OneCommand::_internal_has_description() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool OneCommand::has_description() const {
  return _internal_has_description();
}
inline void OneCommand::clear_description() {
  description_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& OneCommand::description() const {
  // @@protoc_insertion_point(field_get:Cmf.OneCommand.description)
  return _internal_description();
}
inline void OneCommand::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:Cmf.OneCommand.description)
}
inline std::string* OneCommand::mutable_description() {
  // @@protoc_insertion_point(field_mutable:Cmf.OneCommand.description)
  return _internal_mutable_description();
}
inline const std::string& OneCommand::_internal_description() const {
  return description_.Get();
}
inline void OneCommand::_internal_set_description(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OneCommand::set_description(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  description_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Cmf.OneCommand.description)
}
inline void OneCommand::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Cmf.OneCommand.description)
}
inline void OneCommand::set_description(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Cmf.OneCommand.description)
}
inline std::string* OneCommand::_internal_mutable_description() {
  _has_bits_[0] |= 0x00000002u;
  return description_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OneCommand::release_description() {
  // @@protoc_insertion_point(field_release:Cmf.OneCommand.description)
  if (!_internal_has_description()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return description_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OneCommand::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Cmf.OneCommand.description)
}
inline std::string* OneCommand::unsafe_arena_release_description() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Cmf.OneCommand.description)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return description_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void OneCommand::unsafe_arena_set_allocated_description(
    std::string* description) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (description != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  description_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      description, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Cmf.OneCommand.description)
}

// required .Cmf.InterfaceInfo interfaceInfo = 120;
inline bool OneCommand::_internal_has_interfaceinfo() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || interfaceinfo_ != nullptr);
  return value;
}
inline bool OneCommand::has_interfaceinfo() const {
  return _internal_has_interfaceinfo();
}
inline void OneCommand::clear_interfaceinfo() {
  if (interfaceinfo_ != nullptr) interfaceinfo_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::Cmf::InterfaceInfo& OneCommand::_internal_interfaceinfo() const {
  const ::Cmf::InterfaceInfo* p = interfaceinfo_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Cmf::InterfaceInfo*>(
      &::Cmf::_InterfaceInfo_default_instance_);
}
inline const ::Cmf::InterfaceInfo& OneCommand::interfaceinfo() const {
  // @@protoc_insertion_point(field_get:Cmf.OneCommand.interfaceInfo)
  return _internal_interfaceinfo();
}
inline void OneCommand::unsafe_arena_set_allocated_interfaceinfo(
    ::Cmf::InterfaceInfo* interfaceinfo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(interfaceinfo_);
  }
  interfaceinfo_ = interfaceinfo;
  if (interfaceinfo) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Cmf.OneCommand.interfaceInfo)
}
inline ::Cmf::InterfaceInfo* OneCommand::release_interfaceinfo() {
  auto temp = unsafe_arena_release_interfaceinfo();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Cmf::InterfaceInfo* OneCommand::unsafe_arena_release_interfaceinfo() {
  // @@protoc_insertion_point(field_release:Cmf.OneCommand.interfaceInfo)
  _has_bits_[0] &= ~0x00000004u;
  ::Cmf::InterfaceInfo* temp = interfaceinfo_;
  interfaceinfo_ = nullptr;
  return temp;
}
inline ::Cmf::InterfaceInfo* OneCommand::_internal_mutable_interfaceinfo() {
  _has_bits_[0] |= 0x00000004u;
  if (interfaceinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::Cmf::InterfaceInfo>(GetArena());
    interfaceinfo_ = p;
  }
  return interfaceinfo_;
}
inline ::Cmf::InterfaceInfo* OneCommand::mutable_interfaceinfo() {
  // @@protoc_insertion_point(field_mutable:Cmf.OneCommand.interfaceInfo)
  return _internal_mutable_interfaceinfo();
}
inline void OneCommand::set_allocated_interfaceinfo(::Cmf::InterfaceInfo* interfaceinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete interfaceinfo_;
  }
  if (interfaceinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(interfaceinfo);
    if (message_arena != submessage_arena) {
      interfaceinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, interfaceinfo, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  interfaceinfo_ = interfaceinfo;
  // @@protoc_insertion_point(field_set_allocated:Cmf.OneCommand.interfaceInfo)
}

// optional bool confirm = 160;
inline bool OneCommand::_internal_has_confirm() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool OneCommand::has_confirm() const {
  return _internal_has_confirm();
}
inline void OneCommand::clear_confirm() {
  confirm_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool OneCommand::_internal_confirm() const {
  return confirm_;
}
inline bool OneCommand::confirm() const {
  // @@protoc_insertion_point(field_get:Cmf.OneCommand.confirm)
  return _internal_confirm();
}
inline void OneCommand::_internal_set_confirm(bool value) {
  _has_bits_[0] |= 0x00000008u;
  confirm_ = value;
}
inline void OneCommand::set_confirm(bool value) {
  _internal_set_confirm(value);
  // @@protoc_insertion_point(field_set:Cmf.OneCommand.confirm)
}

// optional int32 userlevel = 170;
inline bool OneCommand::_internal_has_userlevel() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool OneCommand::has_userlevel() const {
  return _internal_has_userlevel();
}
inline void OneCommand::clear_userlevel() {
  userlevel_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OneCommand::_internal_userlevel() const {
  return userlevel_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OneCommand::userlevel() const {
  // @@protoc_insertion_point(field_get:Cmf.OneCommand.userlevel)
  return _internal_userlevel();
}
inline void OneCommand::_internal_set_userlevel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  userlevel_ = value;
}
inline void OneCommand::set_userlevel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_userlevel(value);
  // @@protoc_insertion_point(field_set:Cmf.OneCommand.userlevel)
}

// repeated .Cmf.Parameter parameterList = 200;
inline int OneCommand::_internal_parameterlist_size() const {
  return parameterlist_.size();
}
inline int OneCommand::parameterlist_size() const {
  return _internal_parameterlist_size();
}
inline void OneCommand::clear_parameterlist() {
  parameterlist_.Clear();
}
inline ::Cmf::Parameter* OneCommand::mutable_parameterlist(int index) {
  // @@protoc_insertion_point(field_mutable:Cmf.OneCommand.parameterList)
  return parameterlist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Cmf::Parameter >*
OneCommand::mutable_parameterlist() {
  // @@protoc_insertion_point(field_mutable_list:Cmf.OneCommand.parameterList)
  return &parameterlist_;
}
inline const ::Cmf::Parameter& OneCommand::_internal_parameterlist(int index) const {
  return parameterlist_.Get(index);
}
inline const ::Cmf::Parameter& OneCommand::parameterlist(int index) const {
  // @@protoc_insertion_point(field_get:Cmf.OneCommand.parameterList)
  return _internal_parameterlist(index);
}
inline ::Cmf::Parameter* OneCommand::_internal_add_parameterlist() {
  return parameterlist_.Add();
}
inline ::Cmf::Parameter* OneCommand::add_parameterlist() {
  // @@protoc_insertion_point(field_add:Cmf.OneCommand.parameterList)
  return _internal_add_parameterlist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Cmf::Parameter >&
OneCommand::parameterlist() const {
  // @@protoc_insertion_point(field_list:Cmf.OneCommand.parameterList)
  return parameterlist_;
}

// -------------------------------------------------------------------

// Parameter

// optional string name = 100;
inline bool Parameter::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Parameter::has_name() const {
  return _internal_has_name();
}
inline void Parameter::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Parameter::name() const {
  // @@protoc_insertion_point(field_get:Cmf.Parameter.name)
  return _internal_name();
}
inline void Parameter::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:Cmf.Parameter.name)
}
inline std::string* Parameter::mutable_name() {
  // @@protoc_insertion_point(field_mutable:Cmf.Parameter.name)
  return _internal_mutable_name();
}
inline const std::string& Parameter::_internal_name() const {
  return name_.Get();
}
inline void Parameter::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Parameter::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Cmf.Parameter.name)
}
inline void Parameter::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Cmf.Parameter.name)
}
inline void Parameter::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Cmf.Parameter.name)
}
inline std::string* Parameter::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Parameter::release_name() {
  // @@protoc_insertion_point(field_release:Cmf.Parameter.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Parameter::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Cmf.Parameter.name)
}
inline std::string* Parameter::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Cmf.Parameter.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Parameter::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Cmf.Parameter.name)
}

// optional .Cmf.Parameter.Type type = 200;
inline bool Parameter::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Parameter::has_type() const {
  return _internal_has_type();
}
inline void Parameter::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::Cmf::Parameter_Type Parameter::_internal_type() const {
  return static_cast< ::Cmf::Parameter_Type >(type_);
}
inline ::Cmf::Parameter_Type Parameter::type() const {
  // @@protoc_insertion_point(field_get:Cmf.Parameter.type)
  return _internal_type();
}
inline void Parameter::_internal_set_type(::Cmf::Parameter_Type value) {
  assert(::Cmf::Parameter_Type_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  type_ = value;
}
inline void Parameter::set_type(::Cmf::Parameter_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:Cmf.Parameter.type)
}

// optional string description = 300;
inline bool Parameter::_internal_has_description() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Parameter::has_description() const {
  return _internal_has_description();
}
inline void Parameter::clear_description() {
  description_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Parameter::description() const {
  // @@protoc_insertion_point(field_get:Cmf.Parameter.description)
  return _internal_description();
}
inline void Parameter::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:Cmf.Parameter.description)
}
inline std::string* Parameter::mutable_description() {
  // @@protoc_insertion_point(field_mutable:Cmf.Parameter.description)
  return _internal_mutable_description();
}
inline const std::string& Parameter::_internal_description() const {
  return description_.Get();
}
inline void Parameter::_internal_set_description(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Parameter::set_description(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  description_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Cmf.Parameter.description)
}
inline void Parameter::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Cmf.Parameter.description)
}
inline void Parameter::set_description(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Cmf.Parameter.description)
}
inline std::string* Parameter::_internal_mutable_description() {
  _has_bits_[0] |= 0x00000002u;
  return description_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Parameter::release_description() {
  // @@protoc_insertion_point(field_release:Cmf.Parameter.description)
  if (!_internal_has_description()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return description_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Parameter::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Cmf.Parameter.description)
}
inline std::string* Parameter::unsafe_arena_release_description() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Cmf.Parameter.description)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return description_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Parameter::unsafe_arena_set_allocated_description(
    std::string* description) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (description != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  description_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      description, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Cmf.Parameter.description)
}

// optional bool mandatory = 400;
inline bool Parameter::_internal_has_mandatory() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Parameter::has_mandatory() const {
  return _internal_has_mandatory();
}
inline void Parameter::clear_mandatory() {
  mandatory_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool Parameter::_internal_mandatory() const {
  return mandatory_;
}
inline bool Parameter::mandatory() const {
  // @@protoc_insertion_point(field_get:Cmf.Parameter.mandatory)
  return _internal_mandatory();
}
inline void Parameter::_internal_set_mandatory(bool value) {
  _has_bits_[0] |= 0x00000020u;
  mandatory_ = value;
}
inline void Parameter::set_mandatory(bool value) {
  _internal_set_mandatory(value);
  // @@protoc_insertion_point(field_set:Cmf.Parameter.mandatory)
}

// optional string property = 500;
inline bool Parameter::_internal_has_property() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Parameter::has_property() const {
  return _internal_has_property();
}
inline void Parameter::clear_property() {
  property_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& Parameter::property() const {
  // @@protoc_insertion_point(field_get:Cmf.Parameter.property)
  return _internal_property();
}
inline void Parameter::set_property(const std::string& value) {
  _internal_set_property(value);
  // @@protoc_insertion_point(field_set:Cmf.Parameter.property)
}
inline std::string* Parameter::mutable_property() {
  // @@protoc_insertion_point(field_mutable:Cmf.Parameter.property)
  return _internal_mutable_property();
}
inline const std::string& Parameter::_internal_property() const {
  return property_.Get();
}
inline void Parameter::_internal_set_property(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  property_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Parameter::set_property(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  property_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Cmf.Parameter.property)
}
inline void Parameter::set_property(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  property_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Cmf.Parameter.property)
}
inline void Parameter::set_property(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  property_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Cmf.Parameter.property)
}
inline std::string* Parameter::_internal_mutable_property() {
  _has_bits_[0] |= 0x00000004u;
  return property_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Parameter::release_property() {
  // @@protoc_insertion_point(field_release:Cmf.Parameter.property)
  if (!_internal_has_property()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return property_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Parameter::set_allocated_property(std::string* property) {
  if (property != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  property_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), property,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Cmf.Parameter.property)
}
inline std::string* Parameter::unsafe_arena_release_property() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Cmf.Parameter.property)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000004u;
  return property_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Parameter::unsafe_arena_set_allocated_property(
    std::string* property) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (property != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  property_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      property, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Cmf.Parameter.property)
}

// optional bool hidden = 600;
inline bool Parameter::_internal_has_hidden() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Parameter::has_hidden() const {
  return _internal_has_hidden();
}
inline void Parameter::clear_hidden() {
  hidden_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool Parameter::_internal_hidden() const {
  return hidden_;
}
inline bool Parameter::hidden() const {
  // @@protoc_insertion_point(field_get:Cmf.Parameter.hidden)
  return _internal_hidden();
}
inline void Parameter::_internal_set_hidden(bool value) {
  _has_bits_[0] |= 0x00000040u;
  hidden_ = value;
}
inline void Parameter::set_hidden(bool value) {
  _internal_set_hidden(value);
  // @@protoc_insertion_point(field_set:Cmf.Parameter.hidden)
}

// optional string default_val = 700;
inline bool Parameter::_internal_has_default_val() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Parameter::has_default_val() const {
  return _internal_has_default_val();
}
inline void Parameter::clear_default_val() {
  default_val_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& Parameter::default_val() const {
  // @@protoc_insertion_point(field_get:Cmf.Parameter.default_val)
  return _internal_default_val();
}
inline void Parameter::set_default_val(const std::string& value) {
  _internal_set_default_val(value);
  // @@protoc_insertion_point(field_set:Cmf.Parameter.default_val)
}
inline std::string* Parameter::mutable_default_val() {
  // @@protoc_insertion_point(field_mutable:Cmf.Parameter.default_val)
  return _internal_mutable_default_val();
}
inline const std::string& Parameter::_internal_default_val() const {
  return default_val_.Get();
}
inline void Parameter::_internal_set_default_val(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  default_val_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Parameter::set_default_val(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  default_val_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Cmf.Parameter.default_val)
}
inline void Parameter::set_default_val(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  default_val_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Cmf.Parameter.default_val)
}
inline void Parameter::set_default_val(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  default_val_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Cmf.Parameter.default_val)
}
inline std::string* Parameter::_internal_mutable_default_val() {
  _has_bits_[0] |= 0x00000008u;
  return default_val_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Parameter::release_default_val() {
  // @@protoc_insertion_point(field_release:Cmf.Parameter.default_val)
  if (!_internal_has_default_val()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return default_val_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Parameter::set_allocated_default_val(std::string* default_val) {
  if (default_val != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  default_val_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), default_val,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Cmf.Parameter.default_val)
}
inline std::string* Parameter::unsafe_arena_release_default_val() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Cmf.Parameter.default_val)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000008u;
  return default_val_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Parameter::unsafe_arena_set_allocated_default_val(
    std::string* default_val) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (default_val != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  default_val_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      default_val, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Cmf.Parameter.default_val)
}

// -------------------------------------------------------------------

// Operation

// optional string OPERATION = 1;
inline bool Operation::_internal_has_operation() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Operation::has_operation() const {
  return _internal_has_operation();
}
inline void Operation::clear_operation() {
  operation_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Operation::operation() const {
  // @@protoc_insertion_point(field_get:Cmf.Operation.OPERATION)
  return _internal_operation();
}
inline void Operation::set_operation(const std::string& value) {
  _internal_set_operation(value);
  // @@protoc_insertion_point(field_set:Cmf.Operation.OPERATION)
}
inline std::string* Operation::mutable_operation() {
  // @@protoc_insertion_point(field_mutable:Cmf.Operation.OPERATION)
  return _internal_mutable_operation();
}
inline const std::string& Operation::_internal_operation() const {
  return operation_.Get();
}
inline void Operation::_internal_set_operation(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  operation_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Operation::set_operation(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  operation_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Cmf.Operation.OPERATION)
}
inline void Operation::set_operation(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  operation_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Cmf.Operation.OPERATION)
}
inline void Operation::set_operation(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  operation_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Cmf.Operation.OPERATION)
}
inline std::string* Operation::_internal_mutable_operation() {
  _has_bits_[0] |= 0x00000001u;
  return operation_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Operation::release_operation() {
  // @@protoc_insertion_point(field_release:Cmf.Operation.OPERATION)
  if (!_internal_has_operation()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return operation_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Operation::set_allocated_operation(std::string* operation) {
  if (operation != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  operation_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), operation,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Cmf.Operation.OPERATION)
}
inline std::string* Operation::unsafe_arena_release_operation() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Cmf.Operation.OPERATION)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return operation_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Operation::unsafe_arena_set_allocated_operation(
    std::string* operation) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (operation != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  operation_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      operation, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Cmf.Operation.OPERATION)
}

// -------------------------------------------------------------------

// InterfaceInfo

// required string uri = 10;
inline bool InterfaceInfo::_internal_has_uri() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool InterfaceInfo::has_uri() const {
  return _internal_has_uri();
}
inline void InterfaceInfo::clear_uri() {
  uri_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& InterfaceInfo::uri() const {
  // @@protoc_insertion_point(field_get:Cmf.InterfaceInfo.uri)
  return _internal_uri();
}
inline void InterfaceInfo::set_uri(const std::string& value) {
  _internal_set_uri(value);
  // @@protoc_insertion_point(field_set:Cmf.InterfaceInfo.uri)
}
inline std::string* InterfaceInfo::mutable_uri() {
  // @@protoc_insertion_point(field_mutable:Cmf.InterfaceInfo.uri)
  return _internal_mutable_uri();
}
inline const std::string& InterfaceInfo::_internal_uri() const {
  return uri_.Get();
}
inline void InterfaceInfo::_internal_set_uri(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  uri_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void InterfaceInfo::set_uri(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  uri_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Cmf.InterfaceInfo.uri)
}
inline void InterfaceInfo::set_uri(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  uri_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Cmf.InterfaceInfo.uri)
}
inline void InterfaceInfo::set_uri(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  uri_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Cmf.InterfaceInfo.uri)
}
inline std::string* InterfaceInfo::_internal_mutable_uri() {
  _has_bits_[0] |= 0x00000001u;
  return uri_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* InterfaceInfo::release_uri() {
  // @@protoc_insertion_point(field_release:Cmf.InterfaceInfo.uri)
  if (!_internal_has_uri()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return uri_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InterfaceInfo::set_allocated_uri(std::string* uri) {
  if (uri != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  uri_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uri,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Cmf.InterfaceInfo.uri)
}
inline std::string* InterfaceInfo::unsafe_arena_release_uri() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Cmf.InterfaceInfo.uri)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return uri_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void InterfaceInfo::unsafe_arena_set_allocated_uri(
    std::string* uri) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (uri != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  uri_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      uri, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Cmf.InterfaceInfo.uri)
}

// required int32 num = 20;
inline bool InterfaceInfo::_internal_has_num() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool InterfaceInfo::has_num() const {
  return _internal_has_num();
}
inline void InterfaceInfo::clear_num() {
  num_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InterfaceInfo::_internal_num() const {
  return num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InterfaceInfo::num() const {
  // @@protoc_insertion_point(field_get:Cmf.InterfaceInfo.num)
  return _internal_num();
}
inline void InterfaceInfo::_internal_set_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  num_ = value;
}
inline void InterfaceInfo::set_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_num(value);
  // @@protoc_insertion_point(field_set:Cmf.InterfaceInfo.num)
}

// required string method = 30;
inline bool InterfaceInfo::_internal_has_method() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool InterfaceInfo::has_method() const {
  return _internal_has_method();
}
inline void InterfaceInfo::clear_method() {
  method_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& InterfaceInfo::method() const {
  // @@protoc_insertion_point(field_get:Cmf.InterfaceInfo.method)
  return _internal_method();
}
inline void InterfaceInfo::set_method(const std::string& value) {
  _internal_set_method(value);
  // @@protoc_insertion_point(field_set:Cmf.InterfaceInfo.method)
}
inline std::string* InterfaceInfo::mutable_method() {
  // @@protoc_insertion_point(field_mutable:Cmf.InterfaceInfo.method)
  return _internal_mutable_method();
}
inline const std::string& InterfaceInfo::_internal_method() const {
  return method_.Get();
}
inline void InterfaceInfo::_internal_set_method(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  method_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void InterfaceInfo::set_method(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  method_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Cmf.InterfaceInfo.method)
}
inline void InterfaceInfo::set_method(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  method_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Cmf.InterfaceInfo.method)
}
inline void InterfaceInfo::set_method(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  method_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Cmf.InterfaceInfo.method)
}
inline std::string* InterfaceInfo::_internal_mutable_method() {
  _has_bits_[0] |= 0x00000002u;
  return method_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* InterfaceInfo::release_method() {
  // @@protoc_insertion_point(field_release:Cmf.InterfaceInfo.method)
  if (!_internal_has_method()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return method_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InterfaceInfo::set_allocated_method(std::string* method) {
  if (method != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  method_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), method,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Cmf.InterfaceInfo.method)
}
inline std::string* InterfaceInfo::unsafe_arena_release_method() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Cmf.InterfaceInfo.method)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return method_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void InterfaceInfo::unsafe_arena_set_allocated_method(
    std::string* method) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (method != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  method_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      method, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Cmf.InterfaceInfo.method)
}

// -------------------------------------------------------------------

// cmdOptions

// optional .Cmf.cmdOptions.Type dis = 1;
inline bool cmdOptions::_internal_has_dis() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool cmdOptions::has_dis() const {
  return _internal_has_dis();
}
inline void cmdOptions::clear_dis() {
  dis_ = 1;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::Cmf::cmdOptions_Type cmdOptions::_internal_dis() const {
  return static_cast< ::Cmf::cmdOptions_Type >(dis_);
}
inline ::Cmf::cmdOptions_Type cmdOptions::dis() const {
  // @@protoc_insertion_point(field_get:Cmf.cmdOptions.dis)
  return _internal_dis();
}
inline void cmdOptions::_internal_set_dis(::Cmf::cmdOptions_Type value) {
  assert(::Cmf::cmdOptions_Type_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  dis_ = value;
}
inline void cmdOptions::set_dis(::Cmf::cmdOptions_Type value) {
  _internal_set_dis(value);
  // @@protoc_insertion_point(field_set:Cmf.cmdOptions.dis)
}

// optional .Cmf.cmdOptions.Type crte = 2;
inline bool cmdOptions::_internal_has_crte() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool cmdOptions::has_crte() const {
  return _internal_has_crte();
}
inline void cmdOptions::clear_crte() {
  crte_ = 1;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::Cmf::cmdOptions_Type cmdOptions::_internal_crte() const {
  return static_cast< ::Cmf::cmdOptions_Type >(crte_);
}
inline ::Cmf::cmdOptions_Type cmdOptions::crte() const {
  // @@protoc_insertion_point(field_get:Cmf.cmdOptions.crte)
  return _internal_crte();
}
inline void cmdOptions::_internal_set_crte(::Cmf::cmdOptions_Type value) {
  assert(::Cmf::cmdOptions_Type_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  crte_ = value;
}
inline void cmdOptions::set_crte(::Cmf::cmdOptions_Type value) {
  _internal_set_crte(value);
  // @@protoc_insertion_point(field_set:Cmf.cmdOptions.crte)
}

// optional .Cmf.cmdOptions.Type chg = 3;
inline bool cmdOptions::_internal_has_chg() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool cmdOptions::has_chg() const {
  return _internal_has_chg();
}
inline void cmdOptions::clear_chg() {
  chg_ = 1;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::Cmf::cmdOptions_Type cmdOptions::_internal_chg() const {
  return static_cast< ::Cmf::cmdOptions_Type >(chg_);
}
inline ::Cmf::cmdOptions_Type cmdOptions::chg() const {
  // @@protoc_insertion_point(field_get:Cmf.cmdOptions.chg)
  return _internal_chg();
}
inline void cmdOptions::_internal_set_chg(::Cmf::cmdOptions_Type value) {
  assert(::Cmf::cmdOptions_Type_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  chg_ = value;
}
inline void cmdOptions::set_chg(::Cmf::cmdOptions_Type value) {
  _internal_set_chg(value);
  // @@protoc_insertion_point(field_set:Cmf.cmdOptions.chg)
}

// optional .Cmf.cmdOptions.Type del = 4;
inline bool cmdOptions::_internal_has_del() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool cmdOptions::has_del() const {
  return _internal_has_del();
}
inline void cmdOptions::clear_del() {
  del_ = 1;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::Cmf::cmdOptions_Type cmdOptions::_internal_del() const {
  return static_cast< ::Cmf::cmdOptions_Type >(del_);
}
inline ::Cmf::cmdOptions_Type cmdOptions::del() const {
  // @@protoc_insertion_point(field_get:Cmf.cmdOptions.del)
  return _internal_del();
}
inline void cmdOptions::_internal_set_del(::Cmf::cmdOptions_Type value) {
  assert(::Cmf::cmdOptions_Type_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  del_ = value;
}
inline void cmdOptions::set_del(::Cmf::cmdOptions_Type value) {
  _internal_set_del(value);
  // @@protoc_insertion_point(field_set:Cmf.cmdOptions.del)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Cmf

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Cmf::Parameter_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmf::Parameter_Type>() {
  return ::Cmf::Parameter_Type_descriptor();
}
template <> struct is_proto_enum< ::Cmf::cmdOptions_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmf::cmdOptions_Type>() {
  return ::Cmf::cmdOptions_Type_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_command_2eproto
